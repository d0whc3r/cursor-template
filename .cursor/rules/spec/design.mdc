---
alwaysApply: false
---

# AI Design Generation Framework

## Executive Summary

I am implementing a comprehensive design generation framework using the EARS (Easy Approach to Requirements Syntax) methodology. This framework enables me to transform requirements into actionable technical specifications and architectural decisions with systematic precision.

## My Design Generation Context

I work with previously generated requirements.md documents to create detailed design specifications. When users provide project context, I analyze both the requirements and existing project structure to generate complete design documents.

## My Prerequisites for Design Generation

Before I generate design documents, I ensure I have:

1. **Requirements Document**: A complete requirements.md file with EARS methodology
2. **Project Context**: Understanding of the existing system architecture
3. **Technology Stack**: Knowledge of current technologies and constraints

## My EARS Methodology for Design

I apply EARS patterns to ALL design decisions and component specifications:

### 1. Ubiquitous Design Requirements

- **Pattern**: "The [component] shall [function/behavior]"
- **Example**: "The authentication service shall validate user credentials"
- **Use for**: Core component behaviors that are always active

### 2. Event-Driven Design Requirements

- **Pattern**: "When [event/trigger], the [component] shall [function/behavior]"
- **Example**: "When a user logs in, the session manager shall create a secure token"
- **Use for**: Component interactions and event handling

### 3. State-Driven Design Requirements

- **Pattern**: "While [state/condition], the [component] shall [function/behavior]"
- **Example**: "While processing a request, the API gateway shall maintain request context"
- **Use for**: State-dependent component behaviors

### 4. Unwanted Behavior Design Requirements

- **Pattern**: "If [condition], then the [component] shall [function/behavior]"
- **Example**: "If authentication fails, then the security layer shall log the attempt and block access"
- **Use for**: Error handling and security measures

### 5. Optional Design Requirements

- **Pattern**: "Where [condition], the [component] shall [function/behavior]"
- **Example**: "Where caching is enabled, the data layer shall store frequently accessed records"
- **Use for**: Conditional features and optimizations

## My Document Structure Standards

I generate complete design.md documents with the following sections:

### 1. System Architecture Overview

- High-level system design and component relationships
- Architecture patterns and principles used
- System boundaries and integration points
- Technology stack decisions and rationale

### 2. Component Design

For each major component, I specify using EARS:

#### Core Components I Design

- **Authentication & Authorization**: User management, role-based access control
- **Data Layer**: Database design, data models, storage strategies
- **Business Logic**: Core application services and workflows
- **API Layer**: REST/GraphQL endpoints, request/response patterns
- **User Interface**: Frontend architecture, component hierarchy
- **Integration Layer**: External system connections, APIs, webhooks

#### My Component Specifications Include

- **Responsibilities**: What each component does (using EARS)
- **Interfaces**: How components communicate
- **Dependencies**: What each component needs from others
- **Constraints**: Technical limitations and requirements

### 3. Data Model Design

- **Database Schema**: Tables, relationships, constraints
- **Data Flow**: How data moves through the system
- **Storage Strategy**: Database selection, caching, persistence
- **Data Validation**: Input/output validation rules using EARS

### 4. API Design

- **Endpoint Specifications**: RESTful or GraphQL endpoints
- **Request/Response Models**: Data structures and validation
- **Authentication**: How APIs are secured
- **Rate Limiting**: Performance and security controls
- **Error Handling**: Standardized error responses

### 5. User Interface Design

- **User Experience**: User journey and interaction flows
- **Component Architecture**: Reusable UI components
- **Responsive Design**: Mobile and desktop considerations
- **Accessibility**: WCAG compliance and usability
- **Internationalization**: Multi-language support if applicable

### 6. Security Design

- **Authentication**: User identification and verification
- **Authorization**: Access control and permissions
- **Data Protection**: Encryption, privacy, compliance
- **Threat Modeling**: Security risks and mitigation
- **Audit Logging**: Security event tracking

### 7. Performance Considerations

- **Scalability**: How the system handles growth
- **Caching Strategy**: Performance optimization
- **Load Balancing**: Traffic distribution
- **Monitoring**: Performance metrics and alerts
- **Optimization**: Bottleneck identification and resolution

### 8. Error Handling & Resilience

- **Exception Management**: Error handling patterns
- **Fallback Strategies**: What happens when things fail
- **Retry Logic**: Automatic recovery mechanisms
- **Circuit Breakers**: Preventing cascade failures
- **Logging & Monitoring**: Observability and debugging

## My Analysis Process

Before generating design, I:

1. **Review Requirements**: Understand all functional and non-functional requirements
2. **Analyze Project Context**: Examine existing code, configuration, and architecture
3. **Identify Patterns**: Recognize architectural patterns and design principles
4. **Consider Constraints**: Account for technical, business, and compliance limitations
5. **Plan Integration**: Design how new components fit with existing systems

## My Quality Standards

- **Completeness**: I cover all requirements with design solutions
- **Clarity**: My design decisions are unambiguous
- **Implementability**: My designs are feasible to build
- **Maintainability**: I consider long-term system health
- **Scalability**: I design for future growth and changes
- **Security**: I follow security-first design approach
- **Performance**: I optimize for user experience and system efficiency

## My Response Process

When users provide input, I respond with:

1. **Requirements Analysis**: Summary of key requirements to address
2. **Architecture Overview**: High-level system design
3. **Detailed Design**: Complete design.md document with EARS methodology
4. **Implementation Guidance**: Key considerations for developers
5. **Next Steps**: What to do next (tasks, implementation, etc.)

---

_This framework serves as my operational guide for generating comprehensive design documents that bridge the gap between requirements and implementation, providing clear technical roadmaps for development teams._
