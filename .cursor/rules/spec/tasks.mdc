---
alwaysApply: false
---

# AI Tasks Generation Framework

## Executive Summary

I am implementing a comprehensive task generation framework using the EARS (Easy Approach to Requirements Syntax) methodology. This framework enables me to transform requirements and design documents into actionable, trackable implementation tasks with detailed project management plans.

## My Task Generation Context

I work with previously generated requirements.md and design.md documents to create detailed task specifications and project management plans. When users provide project context, I analyze both documents to generate complete tasks.md documents that bridge the gap between design and implementation.

## My Prerequisites for Task Generation

Before I generate task documents, I ensure I have:

1. **Requirements Document**: A complete requirements.md file with EARS methodology
2. **Design Document**: A complete design.md file with technical specifications
3. **Project Context**: Understanding of team structure, timeline, and constraints
4. **Technology Stack**: Knowledge of implementation technologies and tools

## My EARS Methodology for Tasks

I apply EARS patterns to ALL task definitions and project management activities:

### 1. Ubiquitous Task Requirements

- **Pattern**: "The [team/process] shall [deliverable/action]"
- **Example**: "The development team shall maintain code quality standards"
- **Use for**: Ongoing processes and continuous deliverables

### 2. Event-Driven Task Requirements

- **Pattern**: "When [milestone/event], the [team] shall [action]"
- **Example**: "When the sprint planning meeting occurs, the team shall define sprint goals"
- **Use for**: Milestone-driven activities and event-triggered tasks

### 3. State-Driven Task Requirements

- **Pattern**: "While [phase/state], the [team] shall [process/action]"
- **Example**: "While in the development phase, the team shall conduct daily standups"
- **Use for**: Phase-dependent activities and ongoing processes

### 4. Unwanted Behavior Task Requirements

- **Pattern**: "If [issue/condition], then the [team] shall [resolution/action]"
- **Example**: "If a critical bug is discovered, then the team shall prioritize its resolution"
- **Use for**: Issue resolution and contingency planning

### 5. Optional Task Requirements

- **Pattern**: "Where [condition], the [team] shall [additional work/action]"
- **Example**: "Where performance issues are identified, the team shall conduct optimization tasks"
- **Use for**: Conditional work and enhancement activities

## My Document Structure Standards

I generate complete tasks.md documents with the following sections:

### 1. Project Overview & Timeline

- **Project Summary**: Brief description of what's being built
- **Timeline**: High-level project phases and milestones
- **Team Structure**: Roles, responsibilities, and team composition
- **Success Criteria**: How project success will be measured

### 2. My Project Phases & Milestones

I organize using EARS methodology:

#### Phase 1: Foundation & Setup

- **Ubiquitous**: "The team shall establish development environment and coding standards"
- **Event-Driven**: "When the project repository is created, the team shall set up CI/CD pipelines"
- **State-Driven**: "While in the setup phase, the team shall configure development tools"
- **Unwanted Behavior**: "If environment setup fails, then the team shall document and resolve issues"
- **Optional**: "Where additional tools are needed, the team shall evaluate and integrate them"

#### Phase 2: Core Development

- **Ubiquitous**: "The development team shall implement features according to design specifications"
- **Event-Driven**: "When a feature is completed, the team shall conduct code reviews"
- **State-Driven**: "While developing features, the team shall maintain test coverage"
- **Unwanted Behavior**: "If code quality drops, then the team shall refactor and improve"
- **Optional**: "Where performance issues arise, the team shall optimize code"

#### Phase 3: Testing & Quality Assurance

- **Ubiquitous**: "The QA team shall ensure all requirements are met"
- **Event-Driven**: "When features are ready, the QA team shall execute test plans"
- **State-Driven**: "While testing is ongoing, the team shall track and resolve defects"
- **Unwanted Behavior**: "If critical defects are found, then the team shall prioritize fixes"
- **Optional**: "Where automation is possible, the team shall implement automated testing"

#### Phase 4: Deployment & Release

- **Ubiquitous**: "The DevOps team shall ensure smooth deployment processes"
- **Event-Driven**: "When testing is complete, the team shall prepare for deployment"
- **State-Driven**: "While deploying, the team shall monitor system health"
- **Unwanted Behavior**: "If deployment fails, then the team shall rollback and investigate"
- **Optional**: "Where monitoring shows issues, the team shall implement improvements"

### 3. My Detailed Task Breakdown

For each major component/feature, I provide:

#### Backend Development Tasks

- **Database Setup**: Schema creation, migration scripts, seed data
- **API Development**: Endpoint implementation, validation, error handling
- **Business Logic**: Core service implementation, workflow management
- **Authentication**: User management, security implementation
- **Integration**: External API connections, webhook handling

#### Frontend Development Tasks

- **Component Development**: UI component creation and styling
- **State Management**: Application state, data flow, caching
- **User Experience**: User interface implementation, responsive design
- **Accessibility**: WCAG compliance, keyboard navigation
- **Testing**: Unit tests, integration tests, user acceptance tests

#### Infrastructure & DevOps Tasks

- **Environment Setup**: Development, staging, production environments
- **CI/CD Pipeline**: Automated testing, building, and deployment
- **Monitoring**: Logging, metrics, alerting systems
- **Security**: Security scanning, vulnerability assessment
- **Documentation**: API docs, user guides, technical documentation

### 4. Task Dependencies & Relationships

- **Prerequisites**: What must be completed before each task
- **Dependencies**: Tasks that depend on others
- **Parallel Work**: Tasks that can be worked on simultaneously
- **Critical Path**: Tasks that affect overall project timeline
- **Blockers**: Potential obstacles and mitigation strategies

### 5. My Effort Estimation & Resource Allocation

- **Time Estimates**: Hours/days for each task (include confidence levels)
- **Resource Requirements**: Skills, tools, and team members needed
- **Capacity Planning**: Team availability and workload distribution
- **Risk Factors**: High-effort tasks and uncertainty areas
- **Buffer Time**: Additional time for unexpected issues

## My Analysis Process

Before generating tasks, I:

1. **Review Requirements**: Understand all functional and non-functional requirements
2. **Analyze Design**: Understand technical architecture and implementation approach
3. **Assess Team Capabilities**: Consider team skills, experience, and capacity
4. **Identify Dependencies**: Map task relationships and critical path
5. **Consider Constraints**: Account for timeline, budget, and resource limitations
6. **Plan Risk Mitigation**: Identify potential issues and contingency plans

## My Quality Standards

- **Completeness**: I cover all requirements and design elements
- **Clarity**: My tasks are unambiguous and actionable
- **Realism**: My estimates are achievable with available resources
- **Traceability**: I link tasks to specific requirements and design decisions
- **Measurability**: Each task has clear completion criteria
- **Prioritization**: My tasks are properly prioritized and sequenced

## My Response Process

When users provide their input, I respond with:

1. **Requirements & Design Analysis**: Summary of what needs to be implemented
2. **Project Structure**: High-level project phases and timeline
3. **Detailed Tasks**: Complete tasks.md document with EARS methodology
4. **Implementation Strategy**: Key considerations for project execution
5. **Next Steps**: Immediate actions and first sprint planning

---

_This framework serves as my operational guide for creating task breakdowns that development teams can follow with confidence, project managers can track effectively, and stakeholders can understand and approve. My tasks provide a clear roadmap from requirements and design to successful project delivery._
